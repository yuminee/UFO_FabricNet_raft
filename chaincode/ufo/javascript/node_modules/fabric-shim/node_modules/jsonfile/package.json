{
  "_args": [
    [
      "jsonfile@https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
      "/home/yumin/UFO_FabricNet_raft/chaincode/ufo/javascript/node_modules/fabric-shim"
    ]
  ],
  "_from": "jsonfile@https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
  "_id": "jsonfile@4.0.0",
  "_inCache": true,
  "_location": "/fabric-shim/jsonfile",
  "_phantomChildren": {},
  "_requested": {
    "name": "jsonfile",
    "raw": "jsonfile@https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/fabric-shim/fs-extra"
  ],
  "_resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
  "_shasum": "8771aae0799b64076b76640fca058f9c10e33ecb",
  "_shrinkwrap": null,
  "_spec": "jsonfile@https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
  "_where": "/home/yumin/UFO_FabricNet_raft/chaincode/ufo/javascript/node_modules/fabric-shim",
  "author": {
    "email": "jprichardson@gmail.com",
    "name": "JP Richardson"
  },
  "bugs": {
    "url": "https://github.com/jprichardson/node-jsonfile/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.6"
  },
  "description": "Easily read/write JSON files.",
  "devDependencies": {
    "mocha": "2.x",
    "rimraf": "^2.4.0",
    "standard": "^10.0.3"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/jprichardson/node-jsonfile#readme",
  "keywords": [
    "file",
    "fs",
    "fs-extra",
    "json",
    "read",
    "write"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "jsonfile",
  "optionalDependencies": {
    "graceful-fs": "^4.1.6"
  },
  "readme": "Node.js - jsonfile\n================\n\nEasily read/write JSON files.\n\n[![npm Package](https://img.shields.io/npm/v/jsonfile.svg?style=flat-square)](https://www.npmjs.org/package/jsonfile)\n[![build status](https://secure.travis-ci.org/jprichardson/node-jsonfile.svg)](http://travis-ci.org/jprichardson/node-jsonfile)\n[![windows Build status](https://img.shields.io/appveyor/ci/jprichardson/node-jsonfile/master.svg?label=windows%20build)](https://ci.appveyor.com/project/jprichardson/node-jsonfile/branch/master)\n\n<a href=\"https://github.com/feross/standard\"><img src=\"https://cdn.rawgit.com/feross/standard/master/sticker.svg\" alt=\"Standard JavaScript\" width=\"100\"></a>\n\nWhy?\n----\n\nWriting `JSON.stringify()` and then `fs.writeFile()` and `JSON.parse()` with `fs.readFile()` enclosed in `try/catch` blocks became annoying.\n\n\n\nInstallation\n------------\n\n    npm install --save jsonfile\n\n\n\nAPI\n---\n\n### readFile(filename, [options], callback)\n\n`options` (`object`, default `undefined`): Pass in any `fs.readFile` options or set `reviver` for a [JSON reviver](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).\n  - `throws` (`boolean`, default: `true`). If `JSON.parse` throws an error, pass this error to the callback.\n  If `false`, returns `null` for the object.\n\n\n```js\nvar jsonfile = require('jsonfile')\nvar file = '/tmp/data.json'\njsonfile.readFile(file, function(err, obj) {\n  console.dir(obj)\n})\n```\n\n\n### readFileSync(filename, [options])\n\n`options` (`object`, default `undefined`): Pass in any `fs.readFileSync` options or set `reviver` for a [JSON reviver](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).\n- `throws` (`boolean`, default: `true`). If an error is encountered reading or parsing the file, throw the error. If `false`, returns `null` for the object.\n\n```js\nvar jsonfile = require('jsonfile')\nvar file = '/tmp/data.json'\n\nconsole.dir(jsonfile.readFileSync(file))\n```\n\n\n### writeFile(filename, obj, [options], callback)\n\n`options`: Pass in any `fs.writeFile` options or set `replacer` for a [JSON replacer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify). Can also pass in `spaces` and override `EOL` string.\n\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/data.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFile(file, obj, function (err) {\n  console.error(err)\n})\n```\n\n**formatting with spaces:**\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/data.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFile(file, obj, {spaces: 2}, function(err) {\n  console.error(err)\n})\n```\n\n**overriding EOL:**\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/data.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFile(file, obj, {spaces: 2, EOL: '\\r\\n'}, function(err) {\n  console.error(err)\n})\n```\n\n**appending to an existing JSON file:**\n\nYou can use `fs.writeFile` option `{flag: 'a'}` to achieve this.\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/mayAlreadyExistedData.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFile(file, obj, {flag: 'a'}, function (err) {\n  console.error(err)\n})\n```\n\n### writeFileSync(filename, obj, [options])\n\n`options`: Pass in any `fs.writeFileSync` options or set `replacer` for a [JSON replacer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify). Can also pass in `spaces` and override `EOL` string.\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/data.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFileSync(file, obj)\n```\n\n**formatting with spaces:**\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/data.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFileSync(file, obj, {spaces: 2})\n```\n\n**overriding EOL:**\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/data.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFileSync(file, obj, {spaces: 2, EOL: '\\r\\n'})\n```\n\n**appending to an existing JSON file:**\n\nYou can use `fs.writeFileSync` option `{flag: 'a'}` to achieve this.\n\n```js\nvar jsonfile = require('jsonfile')\n\nvar file = '/tmp/mayAlreadyExistedData.json'\nvar obj = {name: 'JP'}\n\njsonfile.writeFileSync(file, obj, {flag: 'a'})\n```\n\nLicense\n-------\n\n(MIT License)\n\nCopyright 2012-2016, JP Richardson  <jprichardson@gmail.com>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jprichardson/node-jsonfile.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "npm run lint && npm run unit",
    "unit": "mocha"
  },
  "version": "4.0.0"
}
