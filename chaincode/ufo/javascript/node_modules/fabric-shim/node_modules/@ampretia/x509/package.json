{
  "_args": [
    [
      "@ampretia/x509@https://registry.npmjs.org/@ampretia/x509/-/x509-0.4.7.tgz",
      "/home/yumin/UFO_FabricNet_raft/chaincode/ufo/javascript/node_modules/fabric-shim"
    ]
  ],
  "_from": "@ampretia/x509@https://registry.npmjs.org/@ampretia/x509/-/x509-0.4.7.tgz",
  "_id": "@ampretia/x509@0.4.7",
  "_inCache": true,
  "_location": "/fabric-shim/@ampretia/x509",
  "_phantomChildren": {},
  "_requested": {
    "name": "@ampretia/x509",
    "raw": "@ampretia/x509@https://registry.npmjs.org/@ampretia/x509/-/x509-0.4.7.tgz",
    "rawSpec": "https://registry.npmjs.org/@ampretia/x509/-/x509-0.4.7.tgz",
    "scope": "@ampretia",
    "spec": "https://registry.npmjs.org/@ampretia/x509/-/x509-0.4.7.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/fabric-shim"
  ],
  "_resolved": "https://registry.npmjs.org/@ampretia/x509/-/x509-0.4.7.tgz",
  "_shasum": "4922626154907ed0c9152b4bf604cbe1b8ef2317",
  "_shrinkwrap": null,
  "_spec": "@ampretia/x509@https://registry.npmjs.org/@ampretia/x509/-/x509-0.4.7.tgz",
  "_where": "/home/yumin/UFO_FabricNet_raft/chaincode/ufo/javascript/node_modules/fabric-shim",
  "author": {
    "name": "Colton Baker"
  },
  "bugs": {
    "url": "https://github.com/ampretia/node-x509/issues"
  },
  "contributors": [
    {
      "name": "Matthew White",
      "email": "whitemat@uk.ibm.com",
      "url": "https://github.com/mbwhite/"
    }
  ],
  "dependencies": {
    "nan": "2.14.0"
  },
  "description": "Simple X509 certificate parser; forked verion from Southern/x509",
  "devDependencies": {
    "chai": "^4.2.0",
    "eslint": "^6.6.0",
    "mocha": "^5.2.0",
    "npm-cli-login": "^0.1.1",
    "sinon": "^7.5.0",
    "sinon-chai": "^3.3.0",
    "standard-version": "^4.4.0"
  },
  "gypfile": true,
  "homepage": "https://github.com/ampretia/node-x509#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "@ampretia/x509",
  "optionalDependencies": {},
  "readme": "node-x509\n=========\n\n[![Build Status](https://dev.azure.com/ampretia/node-x509/_apis/build/status/ampretia.node-x509?branchName=master)](https://dev.azure.com/ampretia/node-x509/_build/latest?definitionId=3&branchName=master)\n\nSimple X509 certificate parser.\n\nThis is a fork of the original node-x509 parser - with the same level of function but confirmed working across LTS node versions (v8, v10, v12).\n\n## Installation\n\nFrom NPM *(recommended)*: `npm install x509`\n\nBuilding and testing from source:\n```\nsudo npm install -g node-gyp\nnpm install\nnpm test\n```\n\n## Usage\nReading from a file:\n```js\nconst x509 = require('x509');\nvar issuer = x509.getIssuer(__dirname + '/certs/your.crt');\n```\n\nReading from a string:\n```js\nconst fs = require('fs'),\n      x509 = require('x509');\nvar issuer = x509.getIssuer(fs.readFileSync('./certs/your.crt').toString());\n```\n\n## Methods\n**Notes:**\n- `cert` may be a filename or a raw base64 encoded PEM string in any of these methods.\n\n#### x509.getAltNames(`cert`)\nParse certificate with `x509.parseCert` and return the alternate names.\n\n```js\nconst x509 = require('x509');\nvar altNames = x509.getAltNames(__dirname + '/certs/nodejitsu.com.crt');\n/*\naltNames = [ '*.nodejitsu.com', 'nodejitsu.com' ]\n*/\n```\n\n#### x509.getIssuer(`cert`)\nParse certificate with `x509.parseCert` and return the issuer.\n\n```js\nconst x509 = require('x509');\nvar issuer = x509.getIssuer(__dirname + '/certs/nodejitsu.com.crt');\n/*\nissuer = { countryName: 'GB',\n  stateOrProvinceName: 'Greater Manchester',\n  localityName: 'Salford',\n  organizationName: 'COMODO CA Limited',\n  commonName: 'COMODO High-Assurance Secure Server CA' }\n*/\n```\n\n#### x509.getSubject(`cert`)\nParse certificate with `x509.parseCert` and return the subject.\n\n```js\nconst x509 = require('x509');\nvar subject = x509.getSubject(__dirname + '/certs/nodejitsu.com.crt');\n/*\nsubject = { countryName: 'US',\n  postalCode: '10010',\n  stateOrProvinceName: 'NY',\n  localityName: 'New York',\n  streetAddress: '902 Broadway, 4th Floor',\n  organizationName: 'Nodejitsu',\n  organizationalUnitName: 'PremiumSSL Wildcard',\n  commonName: '*.nodejitsu.com' }\n*/\n```\n\n#### x509.parseCert(`cert`)\nParse subject, issuer, valid before and after date, and alternate names from certificate.\n\n```js\nconst x509 = require('x509');\nvar cert = x509.parseCert(__dirname + '/certs/nodejitsu.com.crt');\n/*\ncert = { subject:\n   { countryName: 'US',\n     postalCode: '10010',\n     stateOrProvinceName: 'NY',\n     localityName: 'New York',\n     streetAddress: '902 Broadway, 4th Floor',\n     organizationName: 'Nodejitsu',\n     organizationalUnitName: 'PremiumSSL Wildcard',\n     commonName: '*.nodejitsu.com' },\n  issuer:\n   { countryName: 'GB',\n     stateOrProvinceName: 'Greater Manchester',\n     localityName: 'Salford',\n     organizationName: 'COMODO CA Limited',\n     commonName: 'COMODO High-Assurance Secure Server CA' },\n  notBefore: Sun Oct 28 2012 20:00:00 GMT-0400 (EDT),\n  notAfter: Wed Nov 26 2014 18:59:59 GMT-0500 (EST),\n  altNames: [ '*.nodejitsu.com', 'nodejitsu.com' ],\n  signatureAlgorithm: 'sha1WithRSAEncryption',\n  fingerPrint: 'E4:7E:24:8E:86:D2:BE:55:C0:4D:41:A1:C2:0E:06:96:56:B9:8E:EC',\n  publicKey: {\n    algorithm: 'rsaEncryption',\n    e: '65537',\n    n: '.......' } }\n*/\n```\n\n\n#### x509.verify(`cert`, `CABundlePath`, function(err, result){ /*...*/})\n\nPerforms basic certificate validation against a bundle of ca certificates.\n\nIt accepts an error-first callback as first argument. If the error is null, then\nthe certificate is valid.\n\nThe error messages are the same returned by openssl: [x509_verify_cert_error_string](https://www.openssl.org/docs/man1.0.2/crypto/X509_STORE_CTX_get_error.html)\n\n\n**Note:**\nAs now, this function only accepts absolute paths to existing files as arguments\n\n```js\nconst x509 = require('x509');\n\nx509.verify(\n  __dirname + '/certs/user.com.crt',\n  __dirname + 'enduser-example.com.chain',\n  function(err, result){ /*...*/}\n);\n\n```\n\n## Examples\nChecking the date to make sure the certificate is active:\n```js\nconst x509 = require('x509');\nvar cert = x509.parseCert('yourcert.crt'),\n    date = new Date();\n\nif (cert.notBefore > date) {\n  // Certificate isn't active yet.\n}\nif (cert.notAfter < date) {\n  // Certificate has expired.\n}\n```\n\n## License\n\nMIT\n\n#### Alternative implementation / build issues\nIf you are suffering from hard to fix build issues, there is an alternative (pure javascript) implementation using emscripten: https://github.com/encharm/x509.js (based on node-x509, slightly different API)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ampretia/node-x509.git"
  },
  "scripts": {
    "build": "npm run configure &&  node-gyp build",
    "clean": "rm -rf node_modules && rm package-lock.json && rm -rf build",
    "configure": "node-gyp configure",
    "install": "node-gyp rebuild",
    "lint": "eslint .",
    "release": "standard-version",
    "test": "mocha --recursive test/*.js"
  },
  "version": "0.4.7"
}
